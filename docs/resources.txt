# https://github.com/madler/crcany - generic c implementation for any crc

# CRC32C
  http://www.drdobbs.com/parallel/fast-parallelized-crc-computation-using/229401411
  https://github.com/bloomberg/comdb2/tree/master/crc32c
   - _mm_crc32_u64 & _mm_crc32_u8 + recombination
   unsigned int _mm_crc32_u8( unsigned int crc, unsigned char data )
   unsigned int _mm_crc32_u16( unsigned int crc, unsigned short data )
   unsigned int _mm_crc32_u32( unsigned int crc, unsigned int data )
   unsigned __int64 _mm_crc32_u64( unsinged __int64 crc, unsigned __int64 data )

   - also, when available uses the PCLMULQDQ instruction
   - https://stackoverflow.com/questions/15752770/mm-crc32-u64-poorly-defined

# different crc implementations intel
  - https://github.com/01org/isa-l/tree/master/crc
  - https://github.com/intel/soft-crc
  CRC32C - SSE4.2
    https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/crc-iscsi-polynomial-crc32-instruction-paper.pdf

fast table hash calculation
 https://encode.ru/threads/1698-Fast-CRC-table-construction-and-rolling-CRC-hash-calculation
fast crc32
 http://create.stephan-brumme.com/crc32/

# crcutil
  https://code.google.com/archive/p/crcutil/downloads - different algorithms

# merging 2 crc's
 https://github.com/madler/zlib/blob/master/crc32.c#L372

 https://stackoverflow.com/questions/20562546/how-to-get-crc64-distributed-calculation-use-its-linearity-property
 https://github.com/MrBuddyCasino/crc-64/blob/master/crc-64/src/main/java/net/boeckling/crc/CRC64.java
 https://stackoverflow.com/a/23126768 - CRC Calculation Of A Mostly Static Data Stream

 https://stackoverflow.com/questions/40840574/how-to-calculate-crc32-for-5-bit-valid-data-using-8-bit-parallel-crc-calculator
 https://stackoverflow.com/questions/38670483/what-is-the-inverse-of-crc32-combines-matrix-trick
   https://github.com/werekraken/crc-trim/blob/f6bd179864f91ed64ade72e29da7c0e53165a695/crc32_trim_trailing.c


[Sarwate88] Sarwate, D.V., "Computation of Cyclic Redundancy Checks
via Table Look-Up", Communications of the ACM, 31(8), pp.1008-1013.
Comment: This paper describes a high-speed table-driven implementation
for CRC algorithms that is superior to the tea-leaf algorithm.
Although this paper describes the technique used by most modern CRC
implementations, I found the appendix of this paper (where all the
good stuff is) difficult to understand.

Slicing-by-4, Slicing-by-8
A Systematic Approach to Building High Performance, Software-based, CRC Generators
https://static.aminer.org/pdf/PDF/000/432/446/a_systematic_approach_to_building_high_performance_software_based_crc.pdf
Intel Research and Development 2005

Slicing-by-N
Frank L. Berry, Michael E. Kounavis,
"Novel Table Lookup-Based Algorithms for High-Performance CRC Generation",
IEEE Transactions on Computers, vol. 57, no. , pp. 1550-1560,
November 2008, doi:10.1109/TC.2008.85

http://toroid.org/crc32-slicing-by-N-paper
http://www.ijmer.com/papers/Vol2_Issue4/CO2424452451.pdf - slicing-by-N-paper

Hamming distance of a CRC
 https://math.stackexchange.com/questions/1411103/hamming-distance-of-a-crc
 https://users.ece.cmu.edu/~koopman/crc/hdlen.html

https://users.ece.cmu.edu/~koopman/crc/crc32.html
